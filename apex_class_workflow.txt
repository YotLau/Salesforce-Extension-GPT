# Salesforce AI Explainer: Apex Class Summarization Workflow

## Overview
This document outlines the implementation plan for adding Apex Class summarization to the Salesforce AI Explainer Chrome extension, building on the existing architecture for Validation Rules and Flows.

## User Interaction Flow

1. **Extension Activation**
   - User navigates to a Salesforce Apex Class page in Setup
   - User clicks the extension icon in Chrome toolbar
   - The popup.html loads and initializes

2. **Page Detection**
   - The extension checks if the current page is a Salesforce Apex Class page
   - This happens in the `initializePopup()` function in popup.js

3. **UI Preparation**
   - If on an Apex Class page, the extension shows the "Summarize" button
   - Basic Apex Class info is displayed (class name)

4. **Summarization Request**
   - User clicks the "ðŸ¤– Summarize" button
   - This triggers the `handleSummarize()` function with Apex Class handling

## Technical Implementation

1. **Content Script Detection**
   - Added Apex Class page detection to content.js
   - Extracts Apex Class ID from URL

2. **Metadata Retrieval**
   - Added getApexClassMetadata() to salesforce.js
   - Uses Tooling API to fetch Apex Class details

3. **AI Processing**
   - Added explainApexClass() to api.js
   - Uses specialized prompt for Apex code analysis

4. **UI Integration**
   - Updated popup.js to handle Apex Class pages
   - Added Apex Class handling to summarize function

## Special Considerations

1. **Token Limits**
   - Apex Classes can be large, potentially exceeding OpenAI token limits
   - For large classes, implement truncation or focus on key sections

2. **Performance Optimization**
   - Cache Apex Class explanations locally to reduce API calls
   - Implement progressive loading for large code bases

3. **Enhanced Analysis**
   - Consider specialized prompts for different types of Apex (triggers, batch jobs, etc.)
   - Add code quality suggestions based on Salesforce best practices